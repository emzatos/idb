FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# BoSWEmian Rhapsody (BR) API

BR is a simple API allowing consumers to get information on Artists, 
Albums, Tracks, and Concerts.

## Key

N/A = Not Available

R = Required

NR = Not Required

## Artists Collection [/artists]

### List All Artists [GET]

    You can make queries to the artists collection in order
    to get artists associated to the artistID, trackID or albumID:
        
    artistID
    
    the id of a given artist. Provide 1 artistID.
    
    ex. /artists?artistID=1
    
    ---

    albumID
    
    an associated album to the artists. Provide 1 albumID.
    
    ex. /artists?albumID=1
    
    ---
    
    trackID

    an associated track to the artists. Provide 1 trackID.

    ex. /artists?trackID=1

+ Response 200 (application/json)

        [
            {
                "artistID": 1,
                "name": "Taylor Swift",
                "picture": "www.taylorswift.com/picture",
                "country": "US",
                "decade": "90s",
                "popSongID": 1,
                "genre": ["genre1","genre2"]
            },
            {
                "artistID": 2,
                "name": "Michael Jackson",
                "picture": "www.michaeljackson.com/picture",
                "country": "US",
                "decade": "10s",
                "popSongID": 2,
                "genre": ["genre1","genre2"]
            },
            {
                "artistID": 3,
                "name": "Katie Perry",
                "picture": "www.katieperry.com/picture",
                "country": "US",
                "decade": "10s",
                "popSongID": 3,
                "genre": ["genre1","genre2"]
            }
        ]


### Create a New Artist [POST]

    You may create your own artist using this action.
    Create an artist object by providing a JSON object
    with the following attributes:
    
    name of the artist (R),

    a url leading to a picture of the artist (NR),

    country (NR),

    decade (NR),

    and a list of genres pertaining to the artist (NR)


+ Request (application/json)

        {
            {
                "name": "John Doe",
                "picture": "N/A",
                "country": "US",
                "popSongID": 0,
                "decade": "90s",
                "genre": ["genre1","genre2"]
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /artists/5

    + Body

            
            {
                "artistID": 5,
                "name": "John Doe",
                "picture": "N/A",
                "country": "US",
                "popSongID": 0,
                "decade": "90s",
                "genre": ["genre1","genre2"]
            }
            
            
### Update an Artist [PUT]

    Update an artist object by providing a JSON object with the following attributes:
    
    the artist's ID (R)
    
    name of artist (R),

    a url leading to a picture of the artist (NR),

    country (NR),

    decade (NR),

    and a list of genres pertaining to the artist (NR)

If the artistID provided does not exist, the call will fail.

+ Request (application/json)

        {
            {
                "artistID": 5,
                "name": "John Doe",
                "picture": "N/A",
                "country": "US",
                "popSongID": 0,
                "decade": "90s",
                "genre": ["genre1","genre2"]
            }
        }

+ Response 200

    + Headers

            status: success

+ Request (application/json)

        {
            {
                "artistID": 2000,
                "name": "John Doe",
                "picture": "N/A",
                "country": "US",
                "popSongID": 0,
                "decade": "90s",
                "genre": ["genre1","genre2"]
            }
        }

+ Response 400

    + Headers

            status: fail


## Single Artist [/artists/{id}]
A single Artist object with all its details

+ Parameters
    + id (required, Number, `1`) ... Numeric `id` of the Artist to perform action with.

### Retrieve an Artist [GET]
+ Response 200 (application/json)

    + Headers

            Location: /artists/5
            
    + Body

            {
                "artistID": 5,
                "name": "John Doe",
                "picture": "N/A",
                "country": "US",
                "popSongID": 0,
                "decade": "90s",
                "genre": ["genre1","genre2"]
            }
            

## Albums Collection [/albums]

### List All Albums [GET]

    You can make queries to the albums collection in order
    to get albums associated to the albumID, trackID or artistID:
    
    albumID
    
    the id of a given album. Provide 1 albumID.
    
    ex. /albums?albumID=1
    
    ---
    
    artistID 
    
    an associated artist to the albums. Provide 1 artistID.

    ex. /albums?artistID=1

    ---

    trackID
    
    an associated track to the album. Provide 1 trackID

    ex. /albums?trackID=1

+ Response 200 (application/json)

        [
            {
                "albumID": 1,
                "name": "Broken Hearts",
                "genre": "pop",
                "dateReleased": "2014-08-05",
                "albumCover": "picture_url1",
                "label": "Idk what this is",
                "numberOfSongs": 12
            }
        ]

### Create a New Album [POST]

    You may create your own album using this action.
    Create an album object by providing a JSON object
    with the following attributes:
    
    name of the album (R),
    
    genre of album (NR), 
    
    date created (NR),
    
    a url leading to a picture of the album cover (NR),
    
    the label (NR),
    
    and number of songs (NR)

+ Request (application/json)

        {
            {
                "name": "John Doe's Album",
                "genre": "Rock",
                "dateReleased": "2017-03-15",
                "albumCover": "picture_url1",
                "label": "I still don't know what this is",
                "numberOfSongs": 15
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /albums/2

    + Body

            
            {
                "albumID": 2,
                "name": "John Doe's Album",
                "genre": "Rock",
                "dateReleased": "2017-03-15",
                "albumCover": "picture_url1",
                "label": "I still don't know what this is",
                "numberOfSongs": 15
            }
            
### Update an Album [PUT]

    Update an album object by providing a JSON object with the following attributes:
    
    the album's ID (R),
    
    name of the album (NR),
    
    genre of album (NR), 
    
    date created (NR),
    
    a url leading to a picture of the album cover (NR),
    
    the label (NR),
    
    and number of songs (NR)

If the albumID provided does not exist, the call will fail.

+ Request (application/json)

        {
            {
                "albumID": 1,
                "name": "John Doe's Album",
                "genre": "Rock",
                "dateReleased": "2017-03-15",
                "albumCover": "picture_url1",
                "label": "I still don't know what this is",
                "numberOfSongs": 15
            }
        }

+ Response 200

    + Headers

            status: success

+ Request (application/json)

        {
            {
                "albumID": 2000,
                "name": "John Doe's Album",
                "genre": "Rock",
                "dateReleased": "2017-03-15",
                "albumCover": "picture_url1",
                "label": "I still don't know what this is",
                "numberOfSongs": 15
            }
        }

+ Response 400

    + Headers

            status: fail

## Single Album [/albums/{id}]
A single Album object with all its details

+ Parameters
    + id (required, Number, `1`) ... Numeric `id` of the Album to perform action with.

### Retrieve an Album [GET]
+ Response 200 (application/json)

    + Headers

            Location: /albums/2
            
    + Body

            {
                "albumID": 2,
                "name": "John Doe's Album",
                "genre": "Rock",
                "dateReleased": "2017-03-15",
                "albumCover": "picture_url1",
                "label": "I still don't know what this is",
                "numberOfSongs": 15
            }

## Tracks Collection [/tracks]

### List All Tracks [GET]

    You can make queries to the tracks collection in order
    to get tracks associated to the trackID, albumID, or artistID:
        
    trackID
    
    the id of a given track. Provide 1 artistID.
    
    ex. /tracks?trackID=1
    
    ---
    
    albumID
    
    an associated album to the tracks. Provide 1 albumID.
    
    ex. /tracks?albumID=1
    
    ---
    
    artistID - an associated artist to the tracks.
    Provide 1 artistID
    
    ex. /tracks?artistID=1

+ Response 200 (application/json)

        [
            {
                "trackID": 1,
                "name": "Love Shack",
                "genre": "pop",
                "dateReleased": "2014-08-05",
                "duration": 3.46,
                "popularity": 8,
                "preview": "picture_url1",
                "explicit": false,
                "artistID": 1,
                "albumID": 1
            }
        ]

### Create a New Track [POST]

    You may create your own track using this action. 
    Create a track object by providing a JSON object 
    with the following attributes:
    
    name of the track (R),
    
    genre of track (NR), 
    
    date released (NR),
    
    duration (NR),
    
    popularity (NR),
    
    a url leading to a preview of the track (NR),
    
    whether it's explicit (NR),
    
    artistID it's related to (NR),
    
    and albumID it's related to (NR).


+ Request (application/json)

        {
            {
                "name": "John Doe's Track",
                "genre": "pop",
                "dateReleased": "2017-03-15",
                "duration": 4.5,
                "popularity": 3,
                "preview": "picture_url1",
                "explicit": true,
                "artistID": 1,
                "albumID": 1
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /tracks/2

    + Body

            
            {
                "trackID": 2,
                "name": "John Doe's Track",
                "genre": "pop",
                "dateReleased": "2017-03-15",
                "duration": 4.5,
                "popularity": 3,
                "preview": "picture_url1",
                "explicit": true,
                "artistID": 1,
                "albumID": 1
            }

### Update a Track [PUT]

    Update a track object by providing a JSON object with the following attributes:
    
    the track's ID (R)
    
    name of the track (R),
    
    genre of track (NR), 
    
    date released (NR),
    
    duration (NR),
    
    popularity (NR),
    
    a url leading to a preview of the track (NR),
    
    whether it's explicit (NR),
    
    artistID it's related to (NR),
    
    and albumID it's related to (NR).

If the trackID provided does not exist, the call will fail.

+ Request (application/json)

        {
            {
                "trackID": 1,
                "name": "John Doe's Track",
                "genre": "pop",
                "dateReleased": "2017-03-15",
                "duration": 4.5,
                "popularity": 3,
                "preview": "picture_url1",
                "explicit": true,
                "artistID": 1,
                "albumID": 1
            }
        }
+ Response 200

    + Headers

            status: success

+ Request (application/json)

        {
            {
                "trackID": 2000,
                "name": "John Doe's Track",
                "genre": "pop",
                "dateReleased": "2017-03-15",
                "duration": 4.5,
                "popularity": 3,
                "preview": "picture_url1",
                "explicit": true,
                "artistID": 1,
                "albumID": 1
            }
        }

+ Response 400

    + Headers

            status: fail
            

## Single Track [/tracks/{id}]
A single Track object with all its details

+ Parameters
    + id (required, Number, `1`) ... Numeric `id` of the Track to perform action with.

### Retrieve a Track [GET]
+ Response 200 (application/json)

    + Headers

            Location: /tracks/2
            
    + Body

            {
                "trackID": 2,
                "name": "John Doe's Track",
                "genre": "pop",
                "dateReleased": "2017-03-15",
                "duration": 4.5,
                "popularity": 3,
                "preview": "picture_url1",
                "explicit": true,
                "artistID": 1,
                "albumID": 1
            }

## Concerts Collection [/concerts]

### List All Concerts [GET]

    You can make queries to the concert collection in order
    to get concerts associated to the concertID, venueID, or artistID:
    
    concertID
    
    the id of a given concert. Provide 1 concertID.
    
    ex. /concerts?concertID=1
    
    ---
    
    venueID 
    
    an associated venue to the concerts. Provide 1 venueID.
    
    ex. /concerts?venueID=1
    
    ---
    
    artistID
    
    an associated artist to the concerts. Provide 1 artistID.
    
    ex. /concerts?artistID=1


+ Response 200 (application/json)

        [
            {
                "concertID": 1,
                "name": "SXSW Pop Event",
                "link": "concert_link",
                "date/time": "2016-09-02T08:40:51.620Z",
                "lineup": "list of artists",
                "venueID": 1
            }
        ]

### Create a New Concert [POST]

    You may create your own concert using this action.
    Create a concert object by providing a JSON object
    with the following attributes:
    
    name of the concert (R),
    
    concert link (NR),
    
    date/time (NR), 

    lineup (NR),
    
    and the associated venue's ID (NR)


+ Request (application/json)

        {
            {
                "name": "John Doe's Event",
                "link": "concert_link",
                "date/time": "2017-03-05T08:40:51.620Z",
                "lineup": "list of John Doe's Artists",
                "venueID": 5
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /concerts/2

    + Body

            
            {
                "concertID": 2,
                "name": "John Doe's Event",
                "link": "concert_link",
                "date/time": "2017-03-05T08:40:51.620Z",
                "lineup": "list of John Doe's Artists",
                "venueID": 5
            }
            
### Update a Concert [PUT]

    Update a concert object by providing a JSON object with the following attributes:
    
    the concert's ID (R),
    
    name of the concert (R),
    
    concert link (NR),
    
    date/time (NR), 

    lineup (NR),
    
    and the associated venue's ID (NR)

If the concertID provided does not exist, the call will fail.

+ Request (application/json)

        {
            {
                "concertID": 2,
                "name": "John Doe's Event",
                "link": "concert_link",
                "date/time": "2017-03-05T08:40:51.620Z",
                "lineup": "list of John Doe's Artists",
                "venueID": 5
            }
        }

+ Response 200

    + Headers

            status: success

+ Request (application/json)

        {
            {
                "concertID": 5000,
                "name": "John Doe's Event",
                "link": "concert_link",
                "date/time": "2017-03-05T08:40:51.620Z",
                "lineup": "list of John Doe's Artists",
                "venueID": 5
            }
        }

+ Response 400

    + Headers

            status: fail

## Single Concert [/concerts/{id}]
A single Concert object with all its details

+ Parameters
    + id (required, Number, `1`) ... Numeric `id` of the Concert to perform action with.

### Retrieve a Concert [GET]
+ Response 200 (application/json)

    + Headers

            Location: /concerts/2
            
    + Body

            {
                "concertID": 2,
                "name": "John Doe's Event",
                "link": "concert_link",
                "date/time": "2017-03-05T08:40:51.620Z",
                "lineup": "list of John Doe's Artists",
                "venueID": 5
            }

## Venues Collection [/venues]

### List All Venues [GET]

    You can make queries to the venues collection in order
    to get venues associated to the venueID or concertID:
        
    venueID
    
    the id of a given venue. Provide 1 venueID.
    
    ex. /venues?venueID=1
    
    ---
    
    concertID
    
    an associated concert to the venue. Provide 1 concertID.
    
    ex. /venues?concertID=1

+ Response 200 (application/json)

        [
            {
                "venueID": 1,
                "name": "Techspace",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }
        ]

### Create a New Venue [POST]

    You may create your own venue using this action.
    Create a venue object by providing a JSON object
    with the following attributes:

    name of the venue (R),
    
    a url leading to a picture of the venue (NR),
    
    the city (NR),
    
    the region (NR),
    
    the country (NR),
    
    latitude (NR),
    
    and longitude (NR)


+ Request (application/json)

        {
            {
                "name": "John Doe's Venue",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /venues/2

    + Body

            
            {
                "venueID": 2,
                "name": "John Doe's Venue",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }
            
### Update a Venue [PUT]

    Update a venue object by providing a JSON object with the following attributes:
    
    the venue's ID (R),

    name of the venue (R),
    
    a url leading to a picture of the venue (NR),
    
    the city (NR),
    
    the region (NR),
    
    the country (NR),
    
    latitude (NR),
    
    and longitude (NR)

If the venueID provided does not exist, the call will fail.

+ Request (application/json)

        {
            {
                "venueID": 2,
                "name": "John Doe's Venue",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }
        }

+ Response 200

    + Headers

            status: success

+ Request (application/json)

        {
            {
                "venueID": 10000,
                "name": "John Doe's Venue",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }
        }

+ Response 400

    + Headers

            status: fail


## Single Venue [/venues/{id}]
A single Venue object with all its details

+ Parameters
    + id (required, Number, `1`) ... Numeric `id` of the Venue to perform action with.

### Retrieve a Venue [GET]
+ Response 200 (application/json)

    + Headers

            Location: /venues/2
            
    + Body

            {
                "venueID": 2,
                "name": "John Doe's Venue",
                "picture": "venue_picture",
                "city": "Austin",
                "region": "TX",
                "country": "U.S",
                "latitude": 67.436,
                "longitude": 154.32
            }